from __future__ import annotations

import os
import tempfile
from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.fsm import BotStates
from app.service.txt_utils import read_text_file
from app.service.ai_clients import get_ai_response

router = Router()

MAX_FILE_SIZE = 2 * 1024 * 1024   # 2 MB
MAX_CONTEXT   = 100_000           # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

def _is_text_filename(name: str | None) -> bool:
    name = (name or "").lower()
    return name.endswith(".txt") or name.endswith(".md")

@router.message(StateFilter(BotStates.ready), F.document)
async def handle_text_document(message: Message, state: FSMContext):
    doc = message.document
    if not _is_text_filename(doc.file_name):
        # –ù–µ –º–µ—à–∞–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (pdf/xlsx/–∏ —Ç.–ø.) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return

    if doc.file_size and doc.file_size > MAX_FILE_SIZE:
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü—Ä–∏—à–ª–∏—Ç–µ .txt/.md –¥–æ 2 –ú–ë.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    tmpdir = tempfile.mkdtemp(prefix="txt_")
    filename = doc.file_name or f"{doc.file_unique_id}.txt"
    path = os.path.join(tmpdir, filename)
    await message.bot.download(doc, destination=path)

    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
    text = read_text_file(path, max_chars=MAX_CONTEXT)
    if not text:
        await message.answer("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        return

    # –ö–ª–∞–¥—ë–º –≤ FSM
    await state.update_data(file_text=text, file_name=filename, file_ext=".txt", file_len=len(text))

    await message.answer(
        f"üìÑ –§–∞–π–ª ¬´{filename}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–î–∞–ª—å—à–µ:\n"
        "‚Ä¢ /summary ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ\n"
        "‚Ä¢ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É (–µ—Å–ª–∏ –≤–∞—à –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)."
    )

@router.message(StateFilter(BotStates.ready), Command("summary"))
async def cmd_summary(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("file_text")
    if not text:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ .txt –∏–ª–∏ .md —Ñ–∞–π–ª üìé")
        return

    user = await state.get_data()
    provider = user.get("provider")
    model = user.get("model")

    prompt = (
        "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ (–∫–æ—Ä–æ—Ç–∫–∏–µ –ø—É–Ω–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å):\n\n"
        f"{text}"
    )
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    try:
        resp = await get_ai_response(prompt, provider, model)
        await message.answer(resp or "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

@router.message(StateFilter(BotStates.ready), Command("clear"))
async def cmd_clear(message: Message, state: FSMContext):
    # –ë—ã—Å—Ç—Ä—ã–π —Å–±—Ä–æ—Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()
    for k in ("file_text", "file_name", "file_ext", "file_len"):
        if k in data:
            data.pop(k)
    await state.set_data(data)
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –æ—á–∏—â–µ–Ω. –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–π .txt/.md.")
