from __future__ import annotations

import os
import tempfile
from aiogram import Router, F
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, Document

from app.fsm import BotStates
from app.service.txt_utils import read_text_file, is_text_filename, should_prefer_tail_by_ext
from app.service.ai_clients import get_ai_response

router = Router()

MAX_FILE_SIZE = 2 * 1024 * 1024   # 2 MB
MAX_CONTEXT   = 100_000           # –æ–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

def _is_text_document(doc: Document) -> bool:
    # 1) –ø–æ mime —Ç–∏–ø—É
    if doc.mime_type and doc.mime_type.startswith("text/"):
        return True
    # 2) –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    return is_text_filename(doc.file_name)

def _is_code_ext(name: str | None) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ –∫–æ–¥."""
    name = (name or "").lower()
    return name.endswith((
        ".py",".js",".ts",".tsx",".vue",".java",".kt",".rs",".go",".rb",".php",".pl",".swift",
        ".c",".cpp",".h",".hpp",".cs",".r",".sql",".sh",".bat",".ps1"
    ))

@router.message(StateFilter(BotStates.ready), F.document)
async def handle_text_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –¥–æ 5 –ú–ë —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
    –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∏ –µ–≥–æ —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞.
    """
    doc = message.document
    if not _is_text_document(doc):
        # –æ—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (pdf/xlsx –∏ —Ç.–ø.)
        return

    if doc.file_size and doc.file_size > MAX_FILE_SIZE:
        await message.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–æ 5 –ú–ë.")
        return

    tmpdir = tempfile.mkdtemp(prefix="txt_")
    filename = doc.file_name or f"{doc.file_unique_id}.txt"
    path = os.path.join(tmpdir, filename)
    await message.bot.download(doc, destination=path)

    prefer_tail = should_prefer_tail_by_ext(filename)  # –¥–ª—è –ª–æ–≥–æ–≤ ‚Äî —Ö–≤–æ—Å—Ç
    text = read_text_file(path, max_chars=MAX_CONTEXT, prefer_tail=prefer_tail)

    if not text:
        await message.answer("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        return

    await state.update_data(
        file_text=text,
        file_name=filename,
        file_ext=os.path.splitext(filename)[1].lower(),
        file_len=len(text),
    )

    tip = " (–≤–∑—è–ª–∏ —Ö–≤–æ—Å—Ç —Ñ–∞–π–ª–∞)" if prefer_tail else ""
    await message.answer(
        f"üìÑ ¬´{filename}¬ª –∑–∞–≥—Ä—É–∂–µ–Ω{tip}. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        "–î–∞–ª—å—à–µ:\n"
        "‚Ä¢ /summary ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ\n"
        "‚Ä¢ –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞."
    )

    await state.set_state(BotStates.ready)
    await message.answer("–ü–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /clear –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –µ—ë –∏–∑ –º–µ–Ω—é")

@router.message(StateFilter(BotStates.ready), Command("summary"))
async def cmd_summary(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("file_text")
    ext  = (data.get("file_ext") or "").lower()
    name = data.get("file_name") or "—Ñ–∞–π–ª"

    if not text:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª üìé")
        return

    provider = data.get("provider")
    model    = data.get("model")

    # –ß—É—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–¥–∞/–ª–æ–≥–æ–≤/–ø—Ä–æ—á–µ–≥–æ
    if ext in (".log", ".out", ".err"):
        system_prompt = (
            f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–æ–≥–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥ {name}: "
            "—Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –æ—à–∏–±–∫–∏/stack traces, –∞–Ω–æ–º–∞–ª–∏–∏, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10-20 –∑–Ω–∞—á–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π, "
            "–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–ª—å—à–µ."
        )
    elif _is_code_ext(name):
        system_prompt = (
            f"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±–∑–æ—Ä—É –∫–æ–¥–∞. –ü–æ —Ñ–∞–π–ª—É {name} –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã, "
            "–æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/anti-patterns, TODO/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."
        )
    else:
        system_prompt = "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–∞–∫—Ç—ã –∏ —á–∏—Å–ª–∞."

    prompt = f"{system_prompt}\n\n=== –§–ê–ô–õ –ù–ê–ß–ê–õ–û ===\n{text}\n=== –§–ê–ô–õ –ö–û–ù–ï–¶ ==="

    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    try:
        resp = await get_ai_response(prompt, provider, model)
        await message.answer(resp or "–ü—É—Å—Ç–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    await state.set_state(BotStates.ready)
    await message.answer("–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∞–π–ª—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI.")


@router.message(StateFilter(BotStates.ready), Command("clear"))
async def cmd_clear(message: Message, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    data = await state.get_data()
    for k in ("file_text", "file_name", "file_ext", "file_len"):
        data.pop(k, None)
    await state.set_data(data)
    await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –æ—á–∏—â–µ–Ω.")
