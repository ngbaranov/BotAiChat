# app/handlers/select_ai.py
from aiogram import Router, F                               # (1) –¥–æ–±–∞–≤–∏–ª–∏ F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery

from app.fsm import BotStates
from app.keyboards.keybord import select_model_openai_keyboard, select_provider_ai_keyboard, change_provider_keyboard
from app.service.dist_model import OPENAI_MODELS

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞ —Å DeepSeek –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(provider="deepseek", model="deepseek-chat")
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ready
    await state.set_state(BotStates.ready)

    await message.answer(
        "üß† –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤  –∫–∞—á–µ—Å—Ç–≤–µ AI —Å—Ç–æ–∏—Ç DeepSeek! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.",
        reply_markup=change_provider_keyboard()
    )

@router.callback_query(lambda c: c.data == "change_provider")
async def show_provider_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    await callback.message.edit_text(
        "üëã –í—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
        reply_markup=select_provider_ai_keyboard()
    )
    await state.set_state(BotStates.choosing_provider)
    await callback.answer()


# –ë—ã–ª–æ: @router.callback_query(lambda c: c.data.startswith("provider_"))
@router.callback_query(F.data.startswith("provider_"))      # (1) –Ω–∞–¥—ë–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
async def process_provider_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = callback.data.split("_", 1)[1]

    if provider == "openai":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        await callback.message.edit_text(
            "ü§ñ –í—ã –≤—ã–±—Ä–∞–ª–∏ OpenAI. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=select_model_openai_keyboard(OPENAI_MODELS)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(provider="openai")
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        await state.set_state(BotStates.choosing_model)

    elif provider == "deepseek":
        """–ü—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ".
        –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ "deepseek" –∏ –º–æ–¥–µ–ª—å "deepseek-chat". 
        –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ —Å—Ä–∞–∑—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ready (–º–æ–∂–Ω–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)."""
        await callback.message.edit_text("üß† –í—ã –≤—ã–±—Ä–∞–ª–∏ DeepSeek! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        await state.update_data(provider="deepseek", model="deepseek-chat")
        await state.set_state(BotStates.ready)

    await callback.answer()

# –ë—ã–ª–æ: @router.callback_query(lambda c: c.data.startswith("model_"))
@router.callback_query(F.data.startswith("model_"))         # (1) –Ω–∞–¥—ë–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
async def process_model_choice(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = callback.data.split("_", 1)[1]
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    model_name = OPENAI_MODELS.get(model, model)

    await callback.message.edit_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: OpenAI\n"
        f"üéØ –ú–æ–¥–µ–ª—å: {model_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(provider="openai", model=model)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –±–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å.
    await state.set_state(BotStates.ready)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    await callback.answer()

# –ë—ã–ª–æ: @router.message(Command("model"), StateFilter(BotStates.ready))
# (2) —Ä–∞–∑—Ä–µ—à–∏–º /model –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ –∏–∑ –º–µ–Ω—é
@router.message(Command("model"))
async def cmd_model(message: Message, state: FSMContext):
    """"—Å–º–µ–Ω–∞ –∏–ª–∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏" –≤—Ä—É—á–Ω—É—é, –∫–æ–≥–¥–∞ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω."""
    data = await state.get_data()
    provider = data.get("provider")
    if provider == "openai":
        kb: InlineKeyboardMarkup = select_model_openai_keyboard(OPENAI_MODELS)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å OpenAI:", reply_markup=kb)
        await state.set_state(BotStates.choosing_model)
    elif provider == "deepseek":
        await message.answer("–î–ª—è DeepSeek –º–æ–¥–µ–ª—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: deepseek-chat")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=select_provider_ai_keyboard())
        await state.set_state(BotStates.choosing_provider)


@router.message(Command("provider"))
async def cmd_provider(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", reply_markup=select_provider_ai_keyboard())
    await state.set_state(BotStates.choosing_provider)