<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# BotAiChat &#10;&#10;Telegram-бот для взаимодействия с различными AI-провайдерами (OpenAI и DeepSeek) с поддержкой работы с документами.&#10;&#10;##  Функциональность&#10;&#10;- **Мультипровайдерность**: Поддержка OpenAI и DeepSeek API&#10;- **Выбор моделей**: Возможность переключения между различными AI-моделями&#10;- **Работа с документами**: Q&amp;A по загруженным текстовым файлам&#10;- **FSM (Finite State Machine)**: Управление состояниями диалога&#10;- **Docker-ready**: Готовое решение для контейнеризации&#10;- **Команды бота**: Удобное управление через команды&#10;&#10;##  Структура проекта&#10;&#10;```&#10;BotAiChat/&#10;├── main.py                    # Главный файл запуска бота&#10;├── requirements.txt           # Зависимости Python&#10;├── Dockerfile                # Конфигурация Docker&#10;├── docker-compose.yml        # Оркестрация контейнеров&#10;├── app/&#10;│   ├── __init__.py&#10;│   ├── fsm.py                # Определение состояний FSM&#10;│   ├── handlers/             # Обработчики сообщений&#10;│   │   ├── messages.py       # Основная логика обработки сообщений&#10;│   │   ├── messages_txt.py   # Обработка текстовых файлов&#10;│   │   └── select_ai.py      # Выбор AI-провайдера и модели&#10;│   ├── keyboards/            # Клавиатуры для Telegram&#10;│   │   └── keybord.py&#10;│   └── service/              # Бизнес-логика&#10;│       ├── ai_clients.py     # Клиенты для работы с AI API&#10;│       ├── dist_model.py     # Конфигурация моделей&#10;│       ├── file_extension.py # Работа с файлами&#10;│       └── txt_utils.py      # Утилиты для текста&#10;```&#10;&#10;## ⚙️ Установка и настройка&#10;&#10;### 1. Клонирование репозитория&#10;&#10;```bash&#10;git clone &lt;repository-url&gt;&#10;cd BotAiChat&#10;```&#10;&#10;### 2. Настройка переменных окружения&#10;&#10;Создайте файл `.env` в корне проекта:&#10;&#10;```env&#10;TOKEN=your_telegram_bot_token&#10;OPENAI_API_KEY=your_openai_api_key&#10;DEEPSEEK_API_KEY=your_deepseek_api_key&#10;```&#10;&#10;### 3. Установка зависимостей&#10;&#10;#### Локальная установка:&#10;```bash&#10;pip install -r requirements.txt&#10;```&#10;&#10;#### Использование Docker:&#10;```bash&#10;docker-compose up --build&#10;```&#10;&#10;## ️ Использование&#10;&#10;### Команды бота&#10;&#10;- `/start` - Начать настройку (по умолчанию DeepSeek)&#10;- `/model` - Выбрать/сменить модель&#10;- `/provider` - Сменить провайдера&#10;- `/clear` - Вернуться в чат с ИИ&#10;- `/info` - Показать текущего провайдера и модель&#10;&#10;### Работа с ботом&#10;&#10;1. **Запуск**: Отправьте `/start` для инициализации бота&#10;2. **Выбор провайдера**: По умолчанию используется DeepSeek, можно сменить на OpenAI&#10;3. **Выбор модели**: Выберите подходящую модель для провайдера&#10;4. **Общение**: Отправляйте текстовые сообщения для получения ответов от AI&#10;5. **Работа с файлами**: Загрузите текстовый файл для Q&amp;A по его содержимому&#10;&#10;### Функция `handle_user_message`&#10;&#10;Центральная функция обработки сообщений пользователя:&#10;&#10;```python&#10;async def handle_user_message(message: Message, state: FSMContext):&#10;    &quot;&quot;&quot;Обработка сообщений пользователя в состоянии готовности&#10;    (после выбора провайдера и модели)&quot;&quot;&quot;&#10;```&#10;&#10;**Особенности:**&#10;- Работает только в состоянии `BotStates.ready`&#10;- Поддерживает два режима:&#10;  - **Обычный чат**: Прямое общение с AI&#10;  - **Q&amp;A по документу**: Ответы на основе загруженного файла&#10;- Автоматическое разбиение длинных ответов (&gt;4000 символов)&#10;- Показ индикатора печати во время обработки&#10;- Обработка ошибок с информативными сообщениями&#10;&#10;**Алгоритм работы:**&#10;1. Получение данных из состояния (провайдер, модель, текст файла)&#10;2. Проверка наличия текста в сообщении&#10;3. Формирование промпта в зависимости от режима&#10;4. Отправка запроса к AI через `get_ai_response()`&#10;5. Отправка ответа пользователю с разбивкой при необходимости&#10;&#10;## ️ Архитектура&#10;&#10;### FSM States&#10;- `choosing_provider` - Выбор AI-провайдера&#10;- `choosing_model` - Выбор модели&#10;- `ready` - Готовность к обработке сообщений&#10;&#10;### AI-провайдеры&#10;- **OpenAI**: Поддержка различных моделей GPT&#10;- **DeepSeek**: Использование DeepSeek API с системными сообщениями&#10;&#10;### Обработка файлов&#10;- Поддержка текстовых файлов&#10;- Извлечение содержимого для контекстного Q&amp;A&#10;- Ограничение по размеру и формату&#10;&#10;##  Docker&#10;&#10;### Локальная сборка&#10;```bash&#10;docker build -t botaichat .&#10;docker run --env-file .env botaichat&#10;```&#10;&#10;### Docker Compose&#10;```bash&#10;docker-compose up -d&#10;```&#10;&#10;##  Зависимости&#10;&#10;- `aiogram` ~3.21.0 - Telegram Bot API&#10;- `openai` ~1.98.0 - OpenAI API клиент  &#10;- `aiohttp` ~3.12.15 - Асинхронные HTTP-запросы&#10;- `python-dotenv` ~1.1.1 - Загрузка переменных окружения&#10;- `unstructured` - Обработка документов&#10;&#10;##  Конфигурация&#10;&#10;### Переменные окружения&#10;- `TOKEN` - Токен Telegram бота (обязательно)&#10;- `OPENAI_API_KEY` - API ключ OpenAI (опционально)&#10;- `DEEPSEEK_API_KEY` - API ключ DeepSeek (опционально)&#10;- `TZ` - Часовой пояс (по умолчанию: Europe/Moscow)&#10;&#10;### Настройки Docker&#10;- Базовый образ: `python:3.12-slim`&#10;- Пользователь: `appuser` (не root)&#10;- Healthcheck: Проверка компиляции Python модулей&#10;- Restart policy: `unless-stopped`&#10;&#10;##  Особенности и ограничения&#10;&#10;- Максимальная длина ответа ограничена 4000 символов на сообщение Telegram&#10;- Поддержка только текстовых файлов для Q&amp;A&#10;- Требует активные API ключи для работы с внешними сервисами&#10;- Использует long polling для получения обновлений&#10;&#10;##  Логирование&#10;&#10;Логи выводятся в stdout с уровнем INFO:&#10;- Запуск и остановка бота&#10;- Ошибки при обработке сообщений&#10;- Информация о подключении к API&#10;&#10;##  Вклад в разработку&#10;&#10;1. Форкните репозиторий&#10;2. Создайте ветку для функции (`git checkout -b feature/AmazingFeature`)&#10;3. Зафиксируйте изменения (`git commit -m 'Add some AmazingFeature'`)&#10;4. Отправьте в ветку (`git push origin feature/AmazingFeature`)&#10;5. Откройте Pull Request&#10;&#10;##  Лицензия&#10;&#10;Этот проект распространяется под лицензией MIT. См. файл `LICENSE` для подробностей." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>